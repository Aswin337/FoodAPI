# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aYc7lvIlwqZD23Ktm-dsROZ2h1XuMxAh
"""

import streamlit as st
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import requests
import pandas as pd
from sklearn.cluster import KMeans
from difflib import get_close_matches
from PIL import Image
import random

st.set_page_config(page_title="Barcode Scanner + Food Recommender", layout="centered")

st.title("📷 Barcode Scanner + Food Recommender")
st.markdown("Upload an image with a **barcode**, and we’ll analyze the product and suggest healthier alternatives using **AI + ML** 🍎")

uploaded_image = st.file_uploader("📤 Upload or capture an image", type=["png", "jpg", "jpeg"])

if uploaded_image:
    image = Image.open(uploaded_image).convert("RGB")
    st.image(image, caption="📸 Uploaded Image", use_column_width=True)
    img_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
    barcodes = decode(img_cv)

    if not barcodes:
        st.error("❌ No barcode found. Try another image.")
    else:
        barcode = barcodes[0].data.decode("utf-8")
        st.success(f"✅ Barcode detected: `{barcode}`")
        st.balloons()  # 🎈 Balloons animation

        # Step 1: Get product info
        url = f"https://world.openfoodfacts.org/api/v0/product/{barcode}.json"
        response = requests.get(url)
        if response.status_code != 200 or not response.text.strip().startswith("{"):
            st.error("❌ Failed to get product info from API.")
        else:
            data = response.json()
            if data.get("status") != 1:
                st.error("❌ Product not found in OpenFoodFacts.")
            else:
                product = data["product"]
                product_name = product.get("product_name", "Unknown")
                nutriments = product.get("nutriments", {})

                st.subheader(f"📦 Product: {product_name}")

                # 🎭 Emoji feedback based on sugar level
                sugar = float(nutriments.get("sugars_100g", 0))
                if sugar > 30:
                    st.warning("🍭 **High sugar!** Not the healthiest choice...")
                elif sugar > 10:
                    st.info("🙂 **Moderate sugar level.**")
                else:
                    st.success("💚 **Low sugar!** Good choice!")

                st.markdown("### 📊 Nutrition Info (per 100g):")
                for key, val in nutriments.items():
                    if "_100g" in key:
                        st.write(f"- {key}: {val}")

                # Step 2: ML Recommendations
                st.markdown("### 🧠 Finding Healthier Alternatives...")
                categories = ["snack", "meal", "beverage", "chocolate"]
                all_products = []
                for cat in categories:
                    url = "https://world.openfoodfacts.org/cgi/search.pl"
                    params = {
                        "search_terms": cat,
                        "search_simple": 1,
                        "action": "process",
                        "json": 1,
                        "page_size": 100
                    }
                    r = requests.get(url, params=params)
                    if r.status_code == 200 and r.text.strip().startswith("{"):
                        all_products += r.json().get("products", [])

                rows = []
                for prod in all_products:
                    name = prod.get("product_name", "Unknown")
                    nutri = prod.get("nutriments", {})
                    try:
                        row = {
                            "product_name": name,
                            "energy": float(nutri.get("energy_100g", 0)),
                            "sugars": float(nutri.get("sugars_100g", 0)),
                            "fat": float(nutri.get("fat_100g", 0)),
                            "fiber": float(nutri.get("fiber_100g", 0)),
                            "proteins": float(nutri.get("proteins_100g", 0))
                        }
                        rows.append(row)
                    except:
                        continue

                df = pd.DataFrame(rows)
                for col in ["energy", "sugars", "fat", "fiber", "proteins"]:
                    df[col] = df[col].replace(0, pd.NA)
                    df[col] = df[col].fillna(df[col].mean())
                df.dropna(inplace=True)

                kmeans = KMeans(n_clusters=4, random_state=42)
                df["cluster"] = kmeans.fit_predict(df[["energy", "sugars", "fat", "fiber", "proteins"]])

                matches = get_close_matches(product_name, df["product_name"].dropna().tolist(), n=1, cutoff=0.5)
                if not matches:
                    st.warning("❌ Couldn't find a match for ML recommendation.")
                else:
                    matched_name = matches[0]
                    st.write(f"🔍 Matched with dataset: **{matched_name}**")

                    input_row = df[df["product_name"] == matched_name]
                    current_cluster = input_row["cluster"].values[0]
                    healthy_cluster = df.groupby("cluster")[["sugars", "energy"]].mean().sum(axis=1).idxmin()
                    alternatives = df[df["cluster"] == healthy_cluster].sort_values(by=["energy", "sugars"]).head(5)

                    st.markdown("### 🍏 Healthier Alternatives:")
                    st.snow()  # ❄️ Snow animation
                    st.dataframe(alternatives[["product_name", "energy", "sugars", "fat", "fiber", "proteins"]])

                    # 💡 Random tip
                    tips = [
                        "💡 Did you know? Fiber helps you feel full and supports digestion.",
                        "💡 Tip: Drink water before snacks to avoid overeating.",
                        "💡 Natural sugars (from fruits) are better than added sugars!",
                        "💡 Fun Fact: Dark chocolate contains antioxidants!",
                        "💡 Eating slowly helps you recognize fullness better."
                    ]
                    st.markdown(f"---\n**{random.choice(tips)}**")

                    # 🔊 Fun audio (optional)
                    st.audio("https://www.soundjay.com/buttons/sounds/button-16.mp3")